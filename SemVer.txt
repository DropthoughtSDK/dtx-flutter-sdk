Major Changes include - A part/segment of the entire application working completely in All 3 deployment platforms ( Android, iOS and Web ) without any errors and seamlessly similar ( Tracked by master branch )
Minor Changes include - A complete widget with functionality and UI. ( Tracked by Develop branch )
Patch version changes include - A feature/module that has been released as a part of a widget. ( Tracked by feature branch )

Currently the application is in 0.1.0 - One complete widget ( with routing, logging and code-base maintenance and gitignore ). It will be incrementally upgraded in the course of time. 

-- Any changes that I work on part of a feature in a widget will be versioned with alphabets ( a part of a unfinished feature ) - Ex: 0.1.1-(a) ( This would be on a daily basis and changes are committed to the feature branch )
-- Once the Feature has been completed, it will be versioned with the appropriate incremental Patch version number - Ex: 0.1.2 ( This would also be committed to the feature branch )
-- Once a particular widget has been completed, tested for UI and functionality, it will be versioned with appropriate minor version number - Ex: 0.2.0 ( This would be tracked by the develop branch )
-- Once a part of an application is completed, tested for UI and functionality, it will be mentioned with the Major number in the version - Ex: 2.0.0 ( This is the only change tracked by the master branch )

* Code-base has been structured for future clean coding and TDD practices. The code-base has been organized as follows: 
		
		* NodeJS backend contains all the back-end files as follows:
			
			* Schema - A folder that contains 1 schema for each view in the back-end database that I have worked on. This is a part of GraphQL server requirement
			* dbconnect.js - Contains the remote Database information which is required to connect to the database
			* index.js - The main NodeJS file that runs the GraphQL server and gets the data from the database
			
		* bct_dashboard contains the entire flutter front-end project files:
		
			* Lib folder contains the entire coded files in the project
				
				* GraphQLClient folder contains the Setup graphQlClient.dart which creates and connects the graphQlClient to the back-end
				* Queries folder contains the corresponding GraphQL Queries for each UI widget - Ex: MetricsAtLocations_Queries.dart contains all the queries required by the MetricsAtLocations_UI widget
				* RouterSettings folder contains the entire setup for internal application routing, it contains:
					
					* router.dart - The main router file that contains all the routing logic
					* routerConstants.dart - The file that contains all the route constants
					
				* ServiceLocator folder contains the get_it singleton service_locator.dart file, which is used inside the entire application to globally find data sources using the get_it package in flutter
				* UI folder contains: 
					
					* "High" folder - which contains all the high-level reusable UI components such as charts, graphs, etc.
					* "Low" folder - which contains all the low-level reusable UI components such as Customized inkwells, buttons, views, dropdown menus, etc.
					* Each corresponding widget's dart file - which makes use of high and low-level components from "High" and "Low" folders - Ex: MetricsAtLocations_UI.dart file contains the main UI logic for
					  MetricsAtLocations_UI widget
				
				* ViewModel folder contains:
				
					* The view-model layer that does all the heavy-lifting works such as calling the graphQL server by using the queries in "Queries" folder and the graphQL client from the "GraphQLClient" folder,
					  cleans the data as required by the front-end UI and passes only the required data in a required format to the corresponding UI. Ex: MetricsAtLocations_ViewModel.dart provides data to the
					  MetricsAtLocations_UI widget
					  
			    * main.dart - The main function which is the starting point for the entire application - It contains methods that finds and initiates routes, service_locators etc.
				
-- Version 0.1.0:
	
	* Re-created the Metrics-At-Locations tab in spotfire completely
	* Included one line-chart, one pie-chart, dropdown fields for selecting particular day, Label location and Feature to display
	* Implemented a pull-down-to-refresh menu which refreshes the content on the screen upon pull-down
	* Implemented checks to make sure values are selected by disabling the 'Apply filter' button and adding error messages appropriately
	* Provided logging at specific points to help debug
	* GraphQL client is set-up and running which is connected to the back-end NodeJS
	* Routing has been set-up, which will be incrementally developed with each version. A file routerConstants.dart also contains all the necessary constant routes
	
-- Version 0.1.1:
	
	* Implemented the 2nd widget NPS-Metrics
	* 3 tabs, with each tab showing some data related to NPS metrics
	* 1st tab shows the NPS score at that hour
	* 2nd tab shows the Detractors, Promoters, Passives and NPS Scores stacked together to show their trend over each hour
	* 3rd tab shows the pie-chart split-down of all the passives, detractors and promoters contribution
	
-- Version 0.2.0:
	* Completely finished the functionality and UI (almost) of the NPS Metrics tab
	* Included an animated widget for showing and hiding the filters' page
	* Fixed and normalised all the y-axis values for all the line-charts in this tab